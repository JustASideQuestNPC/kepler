// kepler.engine is part of Kepler, a 2D game engine for p5.js
// https://github.com/JustASideQuestNPC/kepler
!function(e){e.ENGINE_INCLUDED=!0,e.USES_RAW_DELTA_TIME=Symbol(),e.USES_SCREEN_SPACE_COORDS=Symbol(),e.Engine=class{#a;#b=[];get numEntities(){return this.#b.length}get deltaTimeRaw(){return this.#c}get deltaTime(){return this.#c*this.deltaTimeMultiplier}#c=0;#d=0;deltaTimeMultiplier=1;get tickRate(){return this.#e}set tickRate(e){this.#e=e,this.#f=1/e}#e;#f;get renderTarget(){return this.#g}set renderTarget(e){this.#g=e,this.#h=e.width,this.#i=e.height,this.cameraAnchor=this.#a.createVector(this.#h/2,this.#i/2),this.cameraPos=this.cameraAnchor,this.worldWidth=this.#h,this.worldHeight=this.#i}#g;get renderWidth(){return this.#h}get renderHeight(){return this.#i}#h;#i;get cameraPos(){return this.#j}set cameraPos(e){this.#j=e,this.cameraTarget=e}#j;cameraTarget;get cameraAnchor(){return this.#a.createVector(-this.#k.x,-this.#k.y)}set cameraAnchor(e){this.#k.x=-e.x,this.#k.y=-e.y}#k;cameraTightness=1;useCameraBoundary=!1;#l;#m;#n=0;#o=0;get worldWidth(){return this.#p}set worldWidth(e){this.#p=e,this.#l=this.#p-this.#h}#p;get worldHeight(){return this.#q}set worldHeight(e){this.#q=e,this.#m=this.#q-this.#i}#q;constructor({sketch:e,renderTarget:t=null,tickRate:r=null,cameraAnchor:s=null,cameraPos:i=null,useCameraBoundary:h=!1,worldWidth:a=null,worldHeight:n=null}={}){this.#a=e,this.#j=e.createVector(),this.cameraTarget=e.createVector(),this.#k=e.createVector(),this.renderTarget=t||e,this.tickRate=r||e.getTargetFrameRate(),null!=s?this.cameraAnchor=this.#a.createVector(s.x,s.y):this.cameraAnchor=this.#a.createVector(this.#h/2,this.#i/2),null!=i?this.cameraPos=this.#a.createVector(i.x,i.y):this.cameraPos=this.cameraAnchor.copy(),this.useCameraBoundary=h,this.#p=a||this.#p,this.#q=n||this.#q}addEntity(e){return e.engine=this,this.#b.push(e),e}update(){if(this.#d+=this.#a.deltaTime/1e3,this.#d<this.#f)return;this.#c=this.#d,this.#d=0;let t=this.#c*this.deltaTimeMultiplier;for(let r of this.#b)r.markForDelete||(r.hasTag(e.USES_RAW_DELTA_TIME)?r.update(this.deltaTimeRaw):r.update(t));this.#b=this.#b.filter(e=>!e.markForDelete),this.#j.equals(this.cameraTarget)||this.#j.lerp(this.cameraTarget,this.cameraTightness)}render(){for(let t of(this.#n=this.#j.x+this.#k.x,this.#o=this.#j.y+this.#k.y,this.useCameraBoundary&&(this.#n=this.#a.constrain(this.#n,0,this.#l),this.#o=this.#a.constrain(this.#o,0,this.#m)),this.#g.push(),this.#g.translate(-this.#n,-this.#o),this.#b))t.hasTag(e.USES_SCREEN_SPACE_COORDS)?(this.#g.translate(this.#n,this.#o),t.render(this.#g),this.#g.translate(-this.#n,-this.#o)):t.render(this.#g);this.#g.pop()}removeIf(e){this.#b=this.#b.filter(t=>e(t))}removeTagged(e){this.removeIf(t=>t.hasTag(e))}removeAll(){this.#b=[]}getIf(e){return this.#b.filter(t=>e(t))}getTagged(e){return this.getIf(t=>t.hasTag(e))}screenPosToWorldPos(e,t){return e.constructor===p5.Vector?this.#a.createVector(e.x+this.#n,e.y+this.#o):[e+this.#n,t+this.#o]}worldPosToScreenPos(e,t){return e.constructor===p5.Vector?this.#a.createVector(e.x-this.#n,e.y-this.#o):[e-this.#n,t-this.#o]}},e.Entity=class{tags=[];engine;markForDelete=!1;update(e){}render(e){}setup(){}hasTag(e){return this.tags.includes(e)}constructor(){if(new.target===e.Entity)throw Error("Kepler.Entity is an abstract class and cannot be instantiated directly (extend it instead)!")}}}(window.Kepler=window.Kepler||{});